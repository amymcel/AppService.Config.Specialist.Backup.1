{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "EngineerAlias": {
      "type": "string",
      "defaultValue": "Alias",
      "metadata": {
        "description": "Engineer MS Alias"
      }
    }
  },
  "variables": {
    "webAppRG": "[resourceGroup().name]",
    "appServicePlanName": "[concat(parameters('EngineerAlias'),'-B1-ASP')]",
    "webAppName": "[concat(parameters('EngineerAlias'),'-B1-APP')]",
    "storageAccountName": "[concat(tolower(parameters('EngineerAlias')),'b1storage')]",
    "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
    "roleDefinitionName": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('EngineerAlias')), resourceGroup().id)]",
    "ips": [ "13.66.212.4", "13.66.212.3", "13.66.212.5" ]
  },
  "resources": [
    {
      "name": "[parameters('EngineerAlias')]",
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "name": "[variables('appServicePlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('EngineerAlias'))]"
      ],
      "properties": {},
      "sku": {
        "name": "S1",
        "capacity": 0
      },
      "kind": "app"
    },
    {
      "name": "[variables('webAppName')]",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "location": "[resourceGroup().location]",
      "kind": "app",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('EngineerAlias'))]",
        "[resourceId('Microsoft.Web/serverFarms', variables('appServicePlanName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverFarms', variables('appServicePlanName'))]"
      }
    },
    {
      "name": "[variables('storageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('EngineerAlias'))]",
        "[resourceId('Microsoft.Web/serverFarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Web/sites', variables('webAppName'))]"
      ],
      "properties": {
        //"networkAcls": {
        //  "defaultAction": "Deny",
        //  "ipRules": [
        //    {
        //      "value": "[reference(resourceId('Microsoft.Web/sites', variables('webAppName')), '2019-06-01').OutboundIpAddresses]",
        //      "action": "Allow"
        //    }
        ////  ]
        //}
      },
      "resources": [
        {
          "name": "[concat(variables('storageAccountName'), '/default/backups')]",
          "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
          "apiVersion": "2019-06-01",
          "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
          ]
        }
      ]
    },
    {
      "name": "[variables('roleDefinitionName')]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2017-09-01",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('EngineerAlias'))]",
        "[resourceId('Microsoft.Web/serverFarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Web/sites', variables('webAppName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('roleDefinitionId')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('EngineerAlias'))).principalId]",
        "principalType": "ServicePrincipal",
        "scope": "[resourceGroup().id]"
      }
    },
    // ------------------------------------------------------------------------------------------------
    // ------------------------------------------------------------------------------------------------
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "GetWebAppOutboundIpAddresses",
      "location": "[resourceGroup().location]",
      "kind": "AzurePowerShell",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('EngineerAlias'))]",
        "[resourceId('Microsoft.Web/serverFarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Web/sites', variables('webAppName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Authorization/roleAssignments', variables('roleDefinitionName'))]"
      ],
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('EngineerAlias'))]": {}
        }
      },
      "properties": {
        "azPowerShellVersion": "3.0",
        "arguments": "[format('-rgName {0} -appName {1} -saName {2}', resourceGroup().name, variables('webAppName'), variables('storageAccountName'))]",
        "scriptContent": "
          param (
            [string] [Parameter(Mandatory=$true)] $rgName,
            [string] [Parameter(Mandatory=$true)] $appName,
            [string] [Parameter(Mandatory=$true)] $saName
          )

          $webapp = Get-AzWebApp -ResourceGroupName $rgName -Name $appName 
          $ipAddresses = $webapp.OutboundIpAddresses
          $ips = $ipAddresses.split(',')

          $storage = Get-AzStorageAccount -ResourceGroupName $rgName -name $saName
          $IpRule = Add-AzStorageAccountNetworkRule -ResourceGroupName $rgName -Name $saName -IPAddressOrRange $ips
          $NetRule = Update-AzStorageAccountNetworkRuleSet -ResourceGroupName $rgName -Name $saName -DefaultAction 'Deny'

        ",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D"
      }
    }
    // ------------------------------------------------------------------------------------------------
  ]
  //"outputs": {
  //  "ips": {
  //    "value": "[reference('GetWebAppOutboundIpAddresses').outputs.ips]",
  //    "type": "array"
  //  }
  //}
}
